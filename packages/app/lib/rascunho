@override
  Widget build(BuildContext context) {
    final mediaQueryData = MediaQuery.of(context);

    return Scaffold(
      // Use a FutureBuilder to display a loading spinner while waiting for the
      // VideoPlayerController to finish initializing.
      body: Stack(
        children: <Widget>[
       
        
              Container(
                //alignment: Alignment.topCenter,
                height: 290, //altura do container
                width: 400, 

                
                child:FutureBuilder(
                  
                  future: _initializeVideoPlayerFuture,
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.done) {
                      // If the VideoPlayerController has finished initialization, use
                      // the data it provides to limit the aspect ratio of the video.
                      return AspectRatio(
                        aspectRatio: _controller.value.aspectRatio,
                        // Use the VideoPlayer widget to display the video.
                        child: VideoPlayer(_controller),
                      );
                    } else {
                      // If the VideoPlayerController is still initializing, show a
                      // loading spinner.
                      return Center(child: CircularProgressIndicator());
                    }
                  },
                ),
              ),
                  
              
              Container(
                alignment: Alignment(-0.8,-0.2),


                child:FloatingActionButton(
                  
                  onPressed: () {
                    // Wrap the play or pause in a call to `setState`. This ensures the
                    // correct icon is shown.
                    setState(() {
                      // If the video is playing, pause it.
                      if (_controller.value.isPlaying) {
                        _controller.pause();
                        exercicio=1+exercicio;
                        escolheVideo();
                        print('semana q ta ${widget.semanaqta}');
                      } else {
                        // If the video is paused, play it.
                        _controller.play();
                      }
                    });
                  },
                  // Display the correct icon depending on the state of the player.
                  child: Icon(
                    _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,
                  ),
                ),
              ),
            

            Container(
              alignment: Alignment(0.21,0.976),//movimenta o container inteiro 
              padding: EdgeInsets.all(20.0),
              child:  MainScreenPortrait(dependencies: dependencies,semanaqta:widget.semanaqta)
                  //: MainScreenLandscape(dependencies: dependencies)
            ) 
        ]
      )
    ); // This trailing comma makes auto-formatting nicer for build methods.
  }
 /*  void recebe(int semanaqta){
    semanaqta = semanaqta;
     print(semanaqta);
  } */
}
 */